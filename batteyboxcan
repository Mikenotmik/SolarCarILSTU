import board
import digitalio
import time
from adafruit_mcp2515       import MCP2515 as CAN
from adafruit_mcp2515.canio import RemoteTransmissionRequest, Message, Match, Timer
import digitalio
import busio
import struct


voltage = 100
current = 0
hitemp  = 25
lotemp  = 25
hicell  = 3
locell  = 3
error   = "ISU"


can_cs = digitalio.DigitalInOut(board.GP9)
can_cs.switch_to_output()
spi = busio.SPI(board.GP2, board.GP3, board.GP4)
mcp = CAN(spi, can_cs, baudrate = 500000, crystal_freq = 16000000, silent = False,loopback = False)

#Mike's fancy led
#Everbody like's blinky lights
led = digitalio.DigitalInOut(board.GP18)
led.direction = digitalio.Direction.OUTPUT

#Define Relays
motor_relay      = digitalio.DigitalInOut(board.GP20)
ground_relay     = digitalio.DigitalInOut(board.GP19)
precharge_relay  = digitalio.DigitalInOut(board.GP10)

strobe           = digitalio.DigitalInOut(board.GP25)
#Set Relays to be outputs
motor_relay.direction              = digitalio.Direction.OUTPUT
ground_relay.direction             = digitalio.Direction.OUTPUT
precharge_relay.direction          = digitalio.Direction.OUTPUT

strobe.direction                   = digitalio.Direction.OUTPUT

def pause_but_blink(sleep_time:float):
    global led      
    sTime = time.time()
    while time.time() - sTime <= sleep_time: 
        led.value = not led.value
        time.sleep(0.2)

started = False
yeah = 0
ok = True
while not started:
    with mcp.listen(matches=[Match(0x6b0, mask=0xffc)], timeout=1.0) as listener:
        message_count = listener.in_waiting()
        print("Message Count: " + str(message_count))

        if message_count == 0:
            continue

        next_message = listener.receive()
        message_num = 0

        while not next_message is None and  not started:
            
            # Handle message processing here

            # Read another message
            next_message = listener.receive()
            message_count = listener.in_waiting()
            print("Message Count: "+ str(message_count))
            message_num += 1
            
            print(f"{ok}herrrrrrrrreeeeeeeee")
            
    
                            
    
            # Check the id to properly unpack it
            if next_message.id == 0x6b0:
                
                print("BMS Data")
            #unpack and print the message
                holder = struct.unpack('>hhhh',next_message.data)
                current = holder[1]*.1
                voltage = holder[3]*.01
                
                  
                    
                #
                print(current,voltage)
            
               
            
            
            if next_message.id == 0x6b1:
                print("temps")
                
                #logTime = time()
                #unpack and print the message
                holder = struct.unpack('>hhhxx',next_message.data)
                lotemp = holder[0]
                hitemp = holder[1]
                avgTemp = holder[2]
                
                             
                #
                print(lotemp,hitemp,avgTemp)
            
            
                
                
            
            
                  
            if next_message.id == 0x6b2:

            #unpack and print the message
                print("volt data")
                holder = struct.unpack('>HHHBB',next_message.data)
                hicell = holder[0]*.0001
                locell = holder[1]*.0001
                avgCell = holder[2]*.0001
                highCellVid = holder[3]
                lowCellVid = holder[4]
                
              
                
            
                
                print(hicell,locell,avgCell,highCellVid,lowCellVid)
                
            
            # Read another message why not... if no messages are avaliable None is returned
            
            next_message = listener.receive()
            yeah += 1
            if voltage >= 126 or voltage <=80:
                ok = False
            if hicell >= 4.19:
                ok = False
            if locell <= 2.6:
                ok = False
            #Current faults
            if current <= -50 or current >= 60:
                ok = False
            if hitemp >= 60:
                ok = False
            if lotemp <= 10:
                ok = False
        
            

 
            if ok and yeah >=10 and not started:
                
           
                #Turn on the precharge relays
                ground_relay.value      = True
                precharge_relay.value   = True
                    
                #Wait 5sec for precharge
                pause_but_blink(5.0)
                motor_relay.value = True
                                                            
                #now turn on shane, i mean the relay <------<         # | 
                                                               # | 
                #wait again 1sec for saftey                  |   
                pause_but_blink(.50)                       # |    
                #LOL-----------------------------------------^
                precharge_relay.value  = False
                    
                    
                    
                #Set the bool to TRUE to show the car has been started 
                started = True
                yeah = 0
                
                
            
            
            
            
while started:
    with mcp.listen(matches=[Match(0x6b0, mask=0xffc)], timeout=1.0) as listener:
        message_count = listener.in_waiting()
        print("Message Count: " + str(message_count))

        if message_count == 0:
            continue

        next_message = listener.receive()
        message_num = 0

        while not next_message is None:
            # Handle message processing here

            # Read another message
            next_message = listener.receive()
            message_count = listener.in_waiting()
            print("Message Count: "+ str(message_count))
            message_num += 1
            
    
                            
    
            # Check the id to properly unpack it
            if next_message.id == 0x6b0:
                
                print("BMS Data")
            #unpack and print the message
                holder = struct.unpack('>hhhh',next_message.data)
                current = holder[1]*.1
                voltage = holder[3]*.01
                
                  
                    
                #
                print(current,voltage)
            
               
            
            
            if next_message.id == 0x6b1:
                print("temps")
                
                #logTime = time()
                #unpack and print the message
                holder = struct.unpack('>hhhxx',next_message.data)
                lotemp = holder[0]
                hitemp = holder[1]
                avgTemp = holder[2]
                
                             
                #
                print(lotemp,hitemp,avgTemp)
            
            
                
                
            
            
                  
            if next_message.id == 0x6b2:

            #unpack and print the message
                print("volt data")
                holder = struct.unpack('>HHHBB',next_message.data)
                hicell = holder[0]*.0001
                locell = holder[1]*.0001
                avgCell = holder[2]*.0001
                highCellVid = holder[3]
                lowCellVid = holder[4]
                
              
                
            
                
                print(hicell,locell,avgCell,highCellVid,lowCellVid)
                
            
            # Read another message why not... if no messages are avaliable None is returned
            
            next_message = listener.receive()
            if voltage >= 126 or voltage <=80:
                ok = False
            if hicell >= 4.19:
                ok = False
            if locell <= 2.6:
                ok = False
            #Current faults
            if current <= -50 or current >= 60:
                ok = False
            if hitemp >= 60:
                ok = False
            if lotemp <= 10:
                ok = False
            
            

 
            if not ok:
                
                ground_relay.value     = False     
                motor_relay.value      = False
                precharge_relay.value  = False
                while True:
                    pause_but_blink(.75)
                    strobe.value = not strobe.value
                    
               
